#pragma once

#include "ActorFlags.h"
#include "Attribute.h"
#include "../Utils/HMath.h"

class Entity;
class TextHolder;
class HashedString;
class MobEffect;
class BlockLegacy;
class Block;
class PlayerActionPacket;

enum class ActorLocation : int32_t {
	Feet = 0x0,
	Body = 0x1,
	WeaponAttachPoint = 0x2,
	Head = 0x3,
	DropAttachPoint = 0x4,
	ExplosionPoint = 0x5,
	Eyes = 0x6,
	BreathingPoint = 0x7,
	Mouth = 0x8,
};

class PlayerMovementProxy {
public:
	BUILD_ACCESS(this, Entity*, owningEntity, 0x10);

private:
	virtual void Destructor();

public:
	virtual __int64 _getStateProvider(void);
	virtual __int64 _getStateProvider2(void);
	virtual bool isRiding(void);
	virtual bool hasPassenger(void);
	virtual bool isClientside(void);
	virtual bool isCreative(void);
	virtual bool isInWater(void);
	virtual bool isOverScaffolding(void);
	virtual bool isSwimming(void);
	virtual bool isImmersedInWater(void);
	virtual bool isHeadInWater(void);
	virtual bool isSwimmer(void);
	virtual bool isImmobile(void);
	virtual bool isKnockedBackOnDeath(void);
	virtual bool shouldBeImmobile(void);
	virtual bool isControlledByLocalInstance(void);
	virtual bool hasTeleported(void);
	virtual bool isWearingLeatherBoots(void);
	virtual bool hasFamily(HashedString const &);
	virtual bool isWorldBuilder(void);
	virtual bool isSleeping(void);
	virtual bool usesOneWayCollision(void);
	virtual bool isStuckInCollider(void);
	virtual void setStuckInCollider(bool);
	virtual bool isStuckItem(void);
	virtual std::vector<AABB, std::allocator<AABB>> getOnewayPhysicsBlocks(void);
	virtual bool wasPenetratingLastFrame(void);
	virtual void setWasPenetratingLastFrame(bool);
	virtual bool isPrimaryLocalPlayer(void);
	virtual std::vector<AABB, std::allocator<AABB>> getSubAABBs(void);
	virtual void setSubAABBs(std::vector<AABB, std::allocator<AABB>> const &);
	virtual AABB getLiquidAABB(int);
	virtual bool isStackable(void);
	virtual void testForEntityStacking(AABB const &, std::vector<AABB, std::allocator<AABB>> &);
	virtual bool getCollidableActorNear(void);
	virtual void setCollidableActorNear(bool);
	virtual float getWalkDist(void);
	virtual void setWalkDist(float);
	virtual bool isFlying(void);
	virtual void setIsFlying(bool);
	virtual bool isOnGround(void);
	virtual void setOnGround(bool);
	virtual bool wasOnGround(void);
	virtual void setWasOnGround(bool);
	virtual int getHealth(void);
	virtual bool getHorizontalCollision(void);
	virtual void setHorizontalCollision(bool);
	virtual bool getVerticalCollision(void);
	virtual void setVerticalCollision(bool);
	virtual bool getCollision(void);
	virtual void setCollision(bool);
	virtual float getMaxAutoStep(void);
	virtual float getHeightOffset(void);
	virtual Vec3 getSlideOffset(void);
	virtual void setSlideOffset(Vec3 const &);
	virtual void setTerrainSurfaceOffset(float);
	virtual Vec3 getBlockMovementSlowdownMultiplier(void);
	virtual void setBlockMovementSlowdownMultiplier(BlockLegacy const &, Vec3 const &);
	virtual void resetBlockMovementSlowdownMultiplier(void);
	virtual float getCurrentSwimAmount(void);
	virtual AttributeInstance getAttribute(Attribute const &);
	virtual bool hasEffect(MobEffect const &);
	virtual int getEffect(MobEffect const &);
	virtual int getActiveEffectCount(void);
	virtual __int64 _getEntityData(void);
	virtual void HashReset(void);
	virtual int getStatusFlag(int);
	virtual bool hasCategory(int);
	virtual bool isType(int);
	virtual int getEntityTypeId(void);
	virtual Vec3 getPos(void);
	virtual Vec3 getPosPrev(void);
	virtual void setPosDirect(Vec3 const &);
	virtual void setPos(Vec3 const &);
	virtual Vec3 getPosDeltaNonConst(void);
	virtual Vec3 getPosDeltaNonConst2(void);
	virtual void setAABB(AABB const &);
	virtual AABB getAABB(void);
	virtual Vec2 getAABBDim(void);
	virtual Vec3 getAttachPos(ActorLocation, float);
	virtual Vec2 getRot(void);
	virtual void setRot(Vec2 const &);
	virtual Vec2 getRotPrev(void);
	virtual float getFallDistance(void);
	virtual void setFallDistance(float);
	virtual bool isSneaking(void);
	virtual void setSneaking(bool);
	virtual float getHeadLookVector(float);
	virtual int getDimensionBlockSource(void);
	virtual int getRegionFromDimension(void);
	virtual __int64 fetchCollisionShapes(AABB const &, float *, bool, PlayerMovementProxy *);
	virtual __int64 fetchEntities(PlayerMovementProxy const *, AABB const &);
	virtual bool hasDimension(void);
	virtual __int64 getVehicle(void);
	virtual bool isWASDControlled(void);
	virtual int getControllingSeat(void);
	virtual int getPassengerIndex(PlayerMovementProxy const &);
	virtual __int64 tryAsBoat(void);
	virtual void tryAsMob(void);
	virtual void tryAsMob1(void);
	virtual void tryAsPlayer(void);
	virtual void tryAsPlayer1(void);
	virtual int64_t getUniqueID(void);
	virtual int64_t getRuntimeID(void);
	virtual Vec3i getBlockPosCurrentlyStandingOn(PlayerMovementProxy *, class BlockSource const &);
	virtual Vec3i getBlockPosCurrentlyStandingOn2(PlayerMovementProxy *);
	virtual void shouldTriggerOnStandOn(BlockLegacy const &, Vec3i const &);
	virtual void _containsSneakCollisionShapes(AABB const &);
	virtual void move(Vec3 const &);
	virtual void moveBBs(Vec3 const &);
	virtual void checkFallDamage(float, bool);
	virtual void onBounceStarted(Vec3i const &, Block const &);
	virtual void updatePrevPosRot(void);
	virtual void sendActorMove(Vec3 const &);
	virtual void _teleportTo(Vec3 const &, bool, int, int);
	virtual void _getRawActor(void);
	virtual void _getRawActor2(void);
	virtual __int64 _getEntityData2(void);
	virtual void _setPreviousPosRot(void);
	virtual void _setHasTeleported(bool);
	virtual __int64 _getAttributes(void);
	virtual int _advanceLiveFrame(__int64 const &);
	virtual Entity *getEntity(void);
	virtual Entity *getEntity2(void);
	virtual int getNoJumpDelay(void);
	virtual void setNoJumpDelay(int);
	virtual bool isJumping(void);
	virtual void setJumping(bool);
	virtual bool getJumpVelRedux(void);
	virtual void setJumpVelRedux(bool);
	virtual Vec3 getJumpStartPos(void);
	virtual void setJumpStartPos(Vec3 const &);
	virtual float getJumpPower(void);
	virtual int getJumpTicks(void);
	virtual void setJumpTicks(int);
	virtual void _endJump(void);
	virtual void onPlayerJump(int);
	virtual float getSpeed(void);
	virtual void setSpeed(float);
	virtual bool isSprinting(void);
	virtual void setSprinting(bool);
	virtual bool isAllowedStandSliding(void);
	virtual void discardFriction(void);
	virtual float getTilt(void);
	virtual void setTilt(float);
	virtual void _allowAscendingScaffolding(void);
	virtual void ascendBlockByJumping(void);
	virtual void descendBlockByCrouching(void);
	virtual void ascendLadder(void);
	virtual void jumpFromGround(class BlockSource const &);
	virtual void canAscendCurrentBlockByJumping(void);
	virtual void canDescendBlockBelowByCrouching(void);
	virtual bool isGliding(void);
	virtual Vec3 getVelocity(void);
	virtual void setVelocity(Vec3 const &);
	virtual float getActorRotation(void);
	virtual void setActorRotation(float);
	virtual void newServerAiStep(void);
	virtual void aiStep(void);
	virtual void updateAttackAnim(void);
	virtual int getNoActionTime(void);
	virtual void setNoActionTime(int);
	virtual float getYHeadRot(void);
	virtual void setYHeadRot(float);
	virtual float getSwimSpeedMultiplier(void);
	virtual void setSwimSpeedMultiplier(float);
	virtual void pushActors(void);
	virtual void updateGliding(void);
	virtual void travel(float, float, float, bool);
	virtual void playJumpSound(class BlockSource const &);
	virtual void emitJumpPreventedEvent(Vec3i const &);
	virtual float getWaterWalkerEnchant(void);
	virtual float getFlySpeed(void);
	virtual void setFlySpeed(float);
	virtual void applyFinalFriction(float, bool);
	virtual float getFrictionModifier(void);
	virtual void setFrictionModifier(float);
	virtual void _getMob(void);
	virtual void _setYHeadRotOld(float);
	virtual bool isSlowedByItemUse(void);
	virtual int getItemUseMovementModifier(void);
	virtual void startGliding(void);
	virtual void stopGliding(void);
	virtual bool isSpectator(void);
	virtual bool isUsingItem(void);
	virtual bool isServerAuthoritativeMovement(void);
	virtual bool isAutoJumping(void);
	virtual void setAutoJumping(bool);
	virtual bool isAutoJumpEnabled(void);
	virtual void wasAutoJumping(void);
	virtual void setWasAutoJumping(bool);
	virtual bool isLocalPlayer(void);
	virtual int getSneakHeight(void);
	virtual float getBob(void);
	virtual void setBob(float);
	virtual float getLastBob(void);
	virtual void setLastBob(float);
	virtual void tryGetPlayerActionComponent(void);
	virtual int getCurrentTick(void);
	virtual int getClientInstance(void);
	virtual int getClientInstance1(void);
	virtual int getGlidingTicks(void);
	virtual int getVRMoveAdjustAngle(void);
	virtual int getPlayerPaddleForce(int);
	virtual void setPlayerPaddleForce(int, float);
	virtual bool isPaddling(int);
	virtual bool areHandsBusy(void);
	virtual void setHandsBusy(bool);
	virtual bool getAbilityBool(int);
	virtual void setAbilityBool(int, bool);
	virtual float getAbilityFloat(int);
	virtual void setAbilityFloat(int, float);
	virtual __int64 getAbilities(void);
	virtual void updateClientPlayerInputState(void);
	virtual bool isEmoting(void);
	virtual void setEmotingStatus(bool);
	virtual void fireEventPersonaEmotePlayed(bool);
	virtual void sendPacket(__int64 &);
	virtual void sendPacket2(__int64 &);
	virtual void sendRequestAbilityPacket(int, bool);
	virtual bool isArmorFlyEnabled(void);
	virtual void setJumpRidingScale(float);
	virtual int getJumpRidingScale(void);
	virtual void registerFramewiseActionOrStop(void);
	virtual int getLoadingState(void);
	virtual void setCurrentLocalMoveVelocity(Vec2 const &);
	virtual void setLastPos(Vec3 const &);
	virtual Vec3 getLastPos(void);
	virtual void setLastDelta(Vec3 const &);
	virtual __int64 getLastDelta(void);
	virtual void sendPlayerInput(void);
	virtual void sendInput(void);
	virtual void sendClientAuthInput(void);
	virtual void shouldSendPosition(void);
	virtual void sendPosition(void);
	virtual void checkMovementStats(Vec3 const &);
	virtual void sendPlayerMove(void);
	virtual void updateTouch(void);
	virtual void _getPlayer(void);
	virtual void _setPositionMode(int);
	virtual void _onMovePlayerPacketNormal(Vec3 const &, Vec2 const &, float);
	virtual void _resetPos(bool);
	virtual void _extractStateFromComponents(void);
	virtual void _applyStateToComponents(void);
	virtual int getControllingPlayer(void);
	virtual void setPaddleState(int, bool);
};
